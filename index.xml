<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Thanh HV's Blog</title><link>https://thanhhv.github.io/</link><description>Recent content on Thanh HV's Blog</description><generator>Hugo -- 0.146.7</generator><language>en-us</language><lastBuildDate>Tue, 24 Jun 2025 13:00:00 +0700</lastBuildDate><atom:link href="https://thanhhv.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Google Cloud Billing</title><link>https://thanhhv.github.io/posts/google-cloud-billing/</link><pubDate>Tue, 24 Jun 2025 13:00:00 +0700</pubDate><guid>https://thanhhv.github.io/posts/google-cloud-billing/</guid><description>&lt;p>&lt;img alt="gg-billing" loading="lazy" src="https://thanhhv.github.io/posts/google-cloud-billing/gg-billing.png">&lt;/p>
&lt;p>In Google Cloud, &lt;strong>Billing&lt;/strong> is the system that helps you manage &lt;strong>costs, payments, and budgets&lt;/strong> when using services on Google Cloud Platform (GCP), such as Compute Engine, BigQuery, Cloud Storage, and more. Below are the four most important components in Google Cloud Billing:&lt;/p>
&lt;h2 id="1-budget">1. Budget&lt;/h2>
&lt;ul>
&lt;li>Allows you to set a &lt;strong>spending limit&lt;/strong> for a specific time period (e.g., month, quarter) for a project or billing account.&lt;/li>
&lt;li>&lt;strong>Purpose:&lt;/strong> Avoid spending beyond your planned budget.&lt;/li>
&lt;li>&lt;strong>Example:&lt;/strong> You&amp;rsquo;re building a backend for a crawling system running on GCP, using multiple VMs or Cloud Functions. To control cost, you set a &lt;strong>$500/month&lt;/strong> budget to track your expenses.&lt;/li>
&lt;/ul>
&lt;h2 id="2-alert">2. Alert&lt;/h2>
&lt;ul>
&lt;li>Alerts are &lt;strong>automatically triggered&lt;/strong> when spending exceeds a defined percentage of the budget (e.g., 50%, 90%, 100%).&lt;/li>
&lt;li>&lt;strong>Purpose:&lt;/strong> Notify you when costs spike unexpectedly — possibly due to a bug or misconfiguration.&lt;/li>
&lt;li>&lt;strong>Example:&lt;/strong> If the cost of your backend on Cloud Run reaches &lt;strong>90% of the $500 budget&lt;/strong>, you’ll receive an email notification to take action.&lt;/li>
&lt;/ul>
&lt;p>&lt;img alt="budget-alert" loading="lazy" src="https://thanhhv.github.io/posts/google-cloud-billing/budget-alert.png">&lt;/p></description></item><item><title>Google Cloud Compute Offering</title><link>https://thanhhv.github.io/posts/google-cloud-compute-offering/</link><pubDate>Mon, 23 Jun 2025 13:00:00 +0700</pubDate><guid>https://thanhhv.github.io/posts/google-cloud-compute-offering/</guid><description>&lt;p>In Google Cloud, &lt;strong>Compute Offering&lt;/strong> is a set of services that help you run workloads (like applications, APIs, batch jobs, etc.) on Google&amp;rsquo;s host infrastructure. Depending on your workload and requirements, you can choose from the options below:&lt;/p>
&lt;p>&lt;img alt="gg-cloud-comute-offering" loading="lazy" src="https://thanhhv.github.io/posts/google-cloud-compute-offering/gg-compute-offering.png">&lt;/p>
&lt;h2 id="1-compute-engine-iaas---infrastructure-as-a-service">1. Compute Engine (IaaS - Infrastructure as a Service)&lt;/h2>
&lt;ul>
&lt;li>A virtual machine where you have full permission to configure the environment.&lt;/li>
&lt;li>High level of control, similar to traditional hosting on the cloud.&lt;/li>
&lt;li>&lt;strong>Use case:&lt;/strong> Configure OS in detail, install custom software, need full system control.&lt;/li>
&lt;li>&lt;strong>Example:&lt;/strong> Run a Node.js/Golang server, cron job, or backend AI model training.&lt;/li>
&lt;li>&lt;strong>AWS equivalent:&lt;/strong> EC2&lt;/li>
&lt;/ul>
&lt;h2 id="2-app-engine-paas---platform-as-a-service">2. App Engine (PaaS - Platform as a Service)&lt;/h2>
&lt;ul>
&lt;li>A platform for running applications where you only need to deploy code — Google handles everything else (scaling, patching, infrastructure, etc.).&lt;/li>
&lt;li>Low level of control — just push your code, no need to manage servers.&lt;/li>
&lt;li>&lt;strong>Use case:&lt;/strong> Rapid development, no infrastructure management needed.&lt;/li>
&lt;li>&lt;strong>Example:&lt;/strong> Run a small API server, REST API, or MVP web app.&lt;/li>
&lt;li>&lt;strong>AWS equivalent:&lt;/strong> Elastic Beanstalk&lt;/li>
&lt;/ul>
&lt;h2 id="3-cloud-run-serverless-containers">3. Cloud Run (Serverless Containers)&lt;/h2>
&lt;ul>
&lt;li>Run containers (e.g., Docker) in a serverless model. Billing is based on request duration.&lt;/li>
&lt;li>Medium level of control — you manage the container image, while Google handles scaling and infrastructure.&lt;/li>
&lt;li>&lt;strong>Use case:&lt;/strong> Leverage the benefits of containers + serverless for lightweight backends or microservices.&lt;/li>
&lt;li>&lt;strong>Example:&lt;/strong> Run an API service, webhook receiver, or AI inference container.&lt;/li>
&lt;li>&lt;strong>AWS equivalent:&lt;/strong> App Runner / Fargate&lt;/li>
&lt;/ul>
&lt;h2 id="4-google-kubernetes-engine-gke-caas---container-as-a-service">4. Google Kubernetes Engine (GKE) (CaaS - Container as a Service)&lt;/h2>
&lt;ul>
&lt;li>Run containerized applications with Kubernetes. Google manages the control plane.&lt;/li>
&lt;li>High level of control — you can fully configure your cluster, while Google manages some parts of it.&lt;/li>
&lt;li>&lt;strong>Use case:&lt;/strong> Need orchestration, CI/CD pipelines, or complex multi-service applications.&lt;/li>
&lt;li>&lt;strong>Example:&lt;/strong> Run a microservices system, CI job runners, or real-time data pipelines.&lt;/li>
&lt;li>&lt;strong>AWS equivalent:&lt;/strong> EKS&lt;/li>
&lt;/ul>
&lt;h2 id="5-cloud-functions-faas---function-as-a-service">5. Cloud Functions (FaaS - Function as a Service)&lt;/h2>
&lt;ul>
&lt;li>Write and deploy small functions that are triggered by events (HTTP, Pub/Sub, Cloud Storage, etc.).&lt;/li>
&lt;li>Extremely easy to use — just write a function, no need to manage infrastructure.&lt;/li>
&lt;li>&lt;strong>Use case:&lt;/strong> Handle small event-driven logic, time-based triggers, or system integration tasks.&lt;/li>
&lt;li>&lt;strong>Example:&lt;/strong> Auto-resize images, handle webhooks from Telegram/Stripe, send emails on user registration.&lt;/li>
&lt;li>&lt;strong>AWS equivalent:&lt;/strong> Lambda&lt;/li>
&lt;/ul></description></item><item><title>Tầm quan trọng của tiếng Anh cho Backend Developer</title><link>https://thanhhv.github.io/ai/importance-of-english-for-backend-developers/</link><pubDate>Sun, 25 May 2025 20:27:00 +0700</pubDate><guid>https://thanhhv.github.io/ai/importance-of-english-for-backend-developers/</guid><description>&lt;p>Trong thế giới công nghệ ngày nay, tiếng Anh không chỉ là một lợi thế, mà còn là một yếu tố &lt;strong>then chốt&lt;/strong> cho sự thành công của một Backend Developer. Tại sao lại như vậy?&lt;/p>
&lt;p>&lt;strong>1. Tiếp cận nguồn tài liệu vô tận:&lt;/strong>&lt;/p>
&lt;p>Hầu hết các tài liệu, framework, thư viện, và công cụ mới nhất trong lĩnh vực backend đều được viết bằng tiếng Anh. Việc thành thạo tiếng Anh giúp bạn dễ dàng tiếp cận, học hỏi và áp dụng những kiến thức này. Thay vì phải chờ đợi bản dịch, bạn có thể tự mình khám phá và làm chủ công nghệ.&lt;/p></description></item><item><title>Bloom filter là gì và trường hợp sử dụng</title><link>https://thanhhv.github.io/posts/bloom-filter/</link><pubDate>Sat, 24 May 2025 20:00:00 +0700</pubDate><guid>https://thanhhv.github.io/posts/bloom-filter/</guid><description>&lt;p>Chào mọi người, hôm nay trong lúc mình ôn tập kiến thức thì nhớ đến Bloom Filter, thế là mình lại phải viết thêm một bài nói về cái này nữa rồi =))&lt;/p>
&lt;p>&lt;strong>Bloom Filter&lt;/strong> là một cấu trúc dữ liệu xác suất được thiết kế để kiểm tra nhanh chóng xem một phần tử có thuộc tập hợp hay không.&lt;/p>
&lt;p>Công dụng của nó là kiểm tra nhanh xem &lt;em>&amp;ldquo;Cái này có chưa nhỉ?&amp;rdquo;&lt;/em>&lt;/p></description></item><item><title>Tại sao thuật toán là yếu tố sống còn cho Backend Senior?</title><link>https://thanhhv.github.io/ai/thuat-toan-backend-senior/</link><pubDate>Fri, 23 May 2025 16:35:00 +0700</pubDate><guid>https://thanhhv.github.io/ai/thuat-toan-backend-senior/</guid><description>&lt;h2 id="tại-sao-thuật-toán-là-yếu-tố-sống-còn-cho-backend-senior">Tại sao thuật toán là yếu tố sống còn cho Backend Senior?&lt;/h2>
&lt;p>Khi bạn mới bắt đầu sự nghiệp lập trình, việc nắm vững cú pháp và các framework là điều cần thiết. Nhưng khi bạn tiến lên vị trí Senior Backend Developer, yêu cầu không chỉ dừng lại ở việc &amp;ldquo;làm được&amp;rdquo; mà còn là &amp;ldquo;làm tốt nhất&amp;rdquo;. Và ở đó, thuật toán đóng vai trò then chốt.&lt;/p>
&lt;p>&lt;strong>1. Hiệu năng là ưu tiên hàng đầu:&lt;/strong>&lt;/p></description></item><item><title>Tổng quan về Hợp đồng Thông minh trong DEX và AMM</title><link>https://thanhhv.github.io/posts/dex/</link><pubDate>Sun, 18 May 2025 16:00:00 +0700</pubDate><guid>https://thanhhv.github.io/posts/dex/</guid><description>&lt;h2 id="hợp-đồng-thông-minh-dex">Hợp đồng thông minh DEX&lt;/h2>
&lt;p>Trong một sàn giao dịch phi tập trung (DEX) như Uniswap, nhiều hợp đồng thông minh làm việc cùng nhau để cho phép hoán đổi token. Các hợp đồng chính thường bao gồm: &lt;strong>Factory&lt;/strong>, &lt;strong>Router&lt;/strong>, và &lt;strong>Pair&lt;/strong>. Vai trò của từng hợp đồng như sau:&lt;/p>
&lt;h3 id="-1-factory-contract">🔹 1. Factory Contract&lt;/h3>
&lt;ul>
&lt;li>Là nơi đăng ký chính của các pool thanh khoản (cặp token).&lt;/li>
&lt;li>Tạo ra pool thanh khoản mới khi có thêm cặp giao dịch mới.&lt;/li>
&lt;li>Lưu trữ ánh xạ giữa các cặp token và địa chỉ của hợp đồng Pair tương ứng.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Các hàm chính:&lt;/strong>&lt;/p></description></item><item><title>Giới thiệu Candyserver: Web Server Open Source Mới Đầy Hứa Hẹn</title><link>https://thanhhv.github.io/ai/candyserver-web-server-open-source/</link><pubDate>Sun, 18 May 2025 15:14:00 +0700</pubDate><guid>https://thanhhv.github.io/ai/candyserver-web-server-open-source/</guid><description>&lt;p>Bạn đang tìm kiếm một web server open source mới, mạnh mẽ và dễ sử dụng? Hãy cùng khám phá Candyserver!&lt;/p>
&lt;p>Candyserver là một web server mới nổi, được xây dựng với mục tiêu cung cấp hiệu suất cao, tính linh hoạt và trải nghiệm người dùng thân thiện. Mặc dù còn khá mới, Candyserver đã thu hút sự chú ý của cộng đồng open source nhờ những ưu điểm sau:&lt;/p></description></item><item><title>So sánh Node.js và Golang trong Backend</title><link>https://thanhhv.github.io/posts/nodejs-vs-go/</link><pubDate>Sat, 17 May 2025 19:00:00 +0700</pubDate><guid>https://thanhhv.github.io/posts/nodejs-vs-go/</guid><description>&lt;p>Xin chào mọi người,&lt;/p>
&lt;p>Trong quá trình làm việc ở vị trí Backend Engineer, mình đã trải qua nhiều ngôn ngữ lập trình, trong đó có &lt;strong>Node.js&lt;/strong> và &lt;strong>Golang&lt;/strong>. Vậy trường hợp nào nên dùng Node.js, trường hợp nào nên dùng Golang? Bài viết này chia sẻ kinh nghiệm thực chiến cá nhân và quan sát thực tế từ đồng nghiệp xung quanh. Let&amp;rsquo;s start!&lt;/p>
&lt;p>&lt;img alt="Nodejs-vs-Golang" loading="lazy" src="https://thanhhv.github.io/posts/nodejs-vs-go/nodejs-go.png">&lt;/p>
&lt;hr>
&lt;h3 id="1-hiệu-năng-và-đa-luồng">1. Hiệu năng và Đa luồng&lt;/h3>
&lt;p>&lt;strong>Golang&lt;/strong> có hiệu năng tốt hơn nhờ là compiled language và mô hình &lt;strong>goroutine&lt;/strong> rất nhẹ (lightweight thread do Go runtime quản lý), dễ dàng xử lý hàng nghìn concurrent connections mà tốn rất ít tài nguyên.&lt;/p></description></item><item><title>Xác thực người dùng bằng ví crypto</title><link>https://thanhhv.github.io/posts/verify-user-wallet/</link><pubDate>Sun, 11 May 2025 20:40:00 +0700</pubDate><guid>https://thanhhv.github.io/posts/verify-user-wallet/</guid><description>&lt;p>Hôm nay, trong một buổi đầu tuần sau chuyến đi du lịch giữa năm, tôi tranh thủ ôn lại kiến thức để chuẩn bị cho buổi phỏng vấn vị trí Backend Blockchain sắp tới. Nhân tiện, tôi viết lại bài này để ghi nhớ kỹ thuật xác thực người dùng không cần tài khoản và mật khẩu, mà sử dụng đăng nhập bằng ví Web3 (như Metamask, Coin98 Super Wallet, Trust Wallet,&amp;hellip;). Cùng bắt đầu nhé! Quá trình này gồm &lt;strong>3 bước đơn giản&lt;/strong>:&lt;/p></description></item><item><title>Re-org là gì? Backend Developer cần xử lý thế nào khi Blockchain "đổi ý"</title><link>https://thanhhv.github.io/posts/reorg-in-blockchain/</link><pubDate>Sat, 10 May 2025 23:44:00 +0700</pubDate><guid>https://thanhhv.github.io/posts/reorg-in-blockchain/</guid><description>&lt;h2 id="1-cơ-bản-về-cách-blockchain-thêm-block">1. Cơ bản về cách blockchain thêm block&lt;/h2>
&lt;p>Các blockchain như Ethereum, Bitcoin hoạt động như sau:&lt;/p>
&lt;ul>
&lt;li>Mỗi node trong mạng sẽ giữ một bản sao của blockchain hiện tại.&lt;/li>
&lt;li>Khi một miner (hoặc validator) tìm được block mới hợp lệ, nó sẽ broadcast block đó cho mạng.&lt;/li>
&lt;li>Các node nhận block mới sẽ xác minh, nếu hợp lệ thì thêm vào chain của mình.&lt;/li>
&lt;/ul>
&lt;p>Vấn đề xảy ra khi nhiều miner có thể tìm được block mới gần như cùng một lúc.&lt;br>
Giả sử mạng lưới đang dừng ở block thứ &lt;code>99&lt;/code>. Miner A tìm ra block &lt;code>100A&lt;/code> và broadcast nó. Ở một nơi khác, Miner B cũng tìm ra một block &lt;code>100B&lt;/code> và broadcast. Do độ trễ mạng, các node khác nhau có thể nhận và thêm vào chuỗi khác nhau: 100A hoặc 100B.&lt;/p></description></item><item><title>SQL vs NoSQL</title><link>https://thanhhv.github.io/posts/mongodb-vs-postgresql/</link><pubDate>Wed, 23 Apr 2025 20:44:51 +0700</pubDate><guid>https://thanhhv.github.io/posts/mongodb-vs-postgresql/</guid><description>&lt;p>Xin chào các bạn,&lt;/p>
&lt;p>Trong bài viết này, tôi sẽ chia sẻ một số kinh nghiệm cá nhân khi phải lựa chọn giữa hai loại cơ sở dữ liệu phổ biến là &lt;strong>SQL&lt;/strong> và &lt;strong>NoSQL&lt;/strong>, cụ thể là &lt;strong>PostgreSQL&lt;/strong> và &lt;strong>MongoDB&lt;/strong>. Bài viết không đi sâu vào lý thuyết SQL hay NoSQL là gì, mà sẽ tập trung vào góc nhìn thực tế khi phải đưa ra lựa chọn trong một dự án cụ thể.&lt;/p></description></item><item><title>Welcome</title><link>https://thanhhv.github.io/posts/welcome/</link><pubDate>Wed, 23 Apr 2025 20:23:52 +0700</pubDate><guid>https://thanhhv.github.io/posts/welcome/</guid><description>&lt;p>🚀 This is the beginning of my Hugo + PaperMod powered blog hosted at &lt;strong>thanhhv.github.io&lt;/strong>. Stay tuned for more!&lt;/p></description></item><item><title>Phân biệt Generative AI và AI Agent cho Lập trình viên Backend</title><link>https://thanhhv.github.io/ai/generative-ai-vs-ai-agent/</link><pubDate>Fri, 11 Apr 2025 16:33:00 +0700</pubDate><guid>https://thanhhv.github.io/ai/generative-ai-vs-ai-agent/</guid><description>&lt;h2 id="generative-ai-và-ai-agent-hiểu-rõ-sự-khác-biệt-cho-backend-developers">Generative AI và AI Agent: Hiểu rõ sự khác biệt cho Backend Developers&lt;/h2>
&lt;p>Trong thế giới AI đang phát triển nhanh chóng, hai khái niệm &amp;ldquo;Generative AI&amp;rdquo; và &amp;ldquo;AI Agent&amp;rdquo; thường được nhắc đến. Bài viết này sẽ giúp các lập trình viên backend phân biệt rõ hai loại hình AI này một cách dễ hiểu.&lt;/p>
&lt;h3 id="generative-ai-là-gì">Generative AI là gì?&lt;/h3>
&lt;p>&lt;strong>Generative AI&lt;/strong> (AI tạo sinh) là một loại AI có khả năng tạo ra nội dung mới. Nội dung này có thể là văn bản, hình ảnh, âm thanh, video, hoặc thậm chí là code.&lt;/p></description></item><item><title>Sự Khác Biệt Giữa Genesis Block của Bitcoin và Ethereum</title><link>https://thanhhv.github.io/ai/genesis-block-bitcoin-vs-ethereum/</link><pubDate>Sat, 26 Oct 2024 16:35:00 +0700</pubDate><guid>https://thanhhv.github.io/ai/genesis-block-bitcoin-vs-ethereum/</guid><description>&lt;h1 id="genesis-block-so-sánh-bitcoin-và-ethereum">Genesis Block: So Sánh Bitcoin và Ethereum&lt;/h1>
&lt;p>Genesis Block, hay Block 0, là khối đầu tiên trong một blockchain. Nó đóng vai trò là nền tảng, đặt nền móng cho toàn bộ mạng lưới. Mặc dù cả Bitcoin và Ethereum đều có Genesis Block, nhưng có những khác biệt quan trọng về cách chúng được tạo ra và dữ liệu chúng chứa.&lt;/p>
&lt;h2 id="genesis-block-của-bitcoin">Genesis Block của Bitcoin&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Hardcoded:&lt;/strong> Genesis Block của Bitcoin được hardcoded trực tiếp vào mã nguồn của Bitcoin Core. Điều này có nghĩa là nó không được khai thác như các block sau này.&lt;/li>
&lt;li>&lt;strong>Message:&lt;/strong> Chứa một thông điệp ẩn: &lt;code>&amp;quot;The Times 03/Jan/2009 Chancellor on brink of second bailout for banks&amp;quot;&lt;/code>. Thông điệp này được cho là một dấu mốc thời gian, đồng thời là một lời chỉ trích hệ thống ngân hàng truyền thống.&lt;/li>
&lt;li>&lt;strong>Difficulty:&lt;/strong> Có độ khó (difficulty) bằng 1, độ khó thấp nhất có thể.&lt;/li>
&lt;li>&lt;strong>Nonce:&lt;/strong> Giá trị nonce được tìm thấy bằng cách brute-force, thử nhiều giá trị khác nhau cho đến khi tìm thấy một hash hợp lệ.&lt;/li>
&lt;li>&lt;strong>Reward:&lt;/strong> Phần thưởng cho việc &amp;ldquo;khai thác&amp;rdquo; Genesis Block (50 BTC) không thể sử dụng được. Transaction này tồn tại, nhưng không thể chi tiêu.&lt;/li>
&lt;/ul>
&lt;h2 id="genesis-block-của-ethereum">Genesis Block của Ethereum&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Không Hardcoded:&lt;/strong> Genesis Block của Ethereum không được hardcoded vào mã nguồn. Thay vào đó, nó được tạo ra thông qua một file JSON cấu hình. Điều này cho phép các blockchain Ethereum riêng tư hoặc thử nghiệm có thể dễ dàng tạo genesis block của riêng họ.&lt;/li>
&lt;li>&lt;strong>State:&lt;/strong> Genesis Block của Ethereum không chỉ chứa thông tin về block, mà còn chứa trạng thái ban đầu của tài khoản. Điều này bao gồm số dư của các tài khoản ban đầu.&lt;/li>
&lt;li>&lt;strong>Mix Hash và Nonce:&lt;/strong> Genesis Block của Ethereum có một mix hash và nonce hợp lệ, nhưng chúng không được tạo ra thông qua quá trình proof-of-work. Chúng được đặt thủ công.&lt;/li>
&lt;li>&lt;strong>Difficulty:&lt;/strong> Genesis block của Ethereum có độ khó thấp, nhưng không nhất thiết phải là độ khó thấp nhất.&lt;/li>
&lt;/ul>
&lt;h2 id="tóm-tắt-so-sánh">Tóm tắt so sánh&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Tính năng&lt;/th>
&lt;th>Bitcoin&lt;/th>
&lt;th>Ethereum&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Hardcoded&lt;/td>
&lt;td>Có&lt;/td>
&lt;td>Không&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Message&lt;/td>
&lt;td>Có (dòng tiêu đề báo)&lt;/td>
&lt;td>Không&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>State&lt;/td>
&lt;td>Không&lt;/td>
&lt;td>Có (trạng thái tài khoản ban đầu)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Khai thác&lt;/td>
&lt;td>Không (hardcoded)&lt;/td>
&lt;td>Không (tạo bằng file JSON)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Phần thưởng&lt;/td>
&lt;td>Không thể chi tiêu&lt;/td>
&lt;td>Không có&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="kết-luận">Kết luận&lt;/h2>
&lt;p>Genesis Block của Bitcoin và Ethereum, mặc dù đều là khối đầu tiên của blockchain, nhưng lại có những khác biệt đáng kể về cách chúng được tạo ra và dữ liệu chúng chứa. Sự khác biệt này phản ánh sự khác biệt về triết lý thiết kế và mục tiêu của hai blockchain này. Bitcoin tập trung vào sự đơn giản và phi tập trung, trong khi Ethereum tập trung vào tính linh hoạt và khả năng mở rộng.&lt;/p></description></item><item><title>Curriculum Vitae</title><link>https://thanhhv.github.io/cv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thanhhv.github.io/cv/</guid><description>&lt;h2 id="-hoang-van-thanh---backend-engineer">👨‍💻 Hoang Van Thanh - Backend Engineer&lt;/h2>
&lt;ul>
&lt;li>📍 Thu Duc, Ho Chi Minh City, Vietnam&lt;/li>
&lt;li>📞 0332 *** 362&lt;/li>
&lt;li>📧 Email: &lt;a href="mailto:thanhhv317@gmail.com">thanhhv317@gmail.com&lt;/a>&lt;/li>
&lt;li>🐙 GitHub: &lt;a href="https://github.com/thanhhv">@thanhhv&lt;/a>&lt;/li>
&lt;li>🔗 LinkedIn: &lt;a href="https://www.linkedin.com/in/thanhhv317/">linkedin.com/in/thanhhv317&lt;/a>&lt;/li>
&lt;li>📅 DOB: 11/08/1998&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="-skills">🛠 Skills&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Languages &amp;amp; Frameworks&lt;/strong>: Node.js, Go, TypeScript, JavaScript, Express, NestJS&lt;/li>
&lt;li>&lt;strong>Architecture&lt;/strong>: Microservices, Message Queue, Clean Architecture, WebSocket&lt;/li>
&lt;li>&lt;strong>Databases&lt;/strong>: MongoDB, PostgreSQL, Redis&lt;/li>
&lt;li>&lt;strong>Blockchain&lt;/strong>: Web3.js, ethers, On-chain Data&lt;/li>
&lt;li>&lt;strong>DevOps &amp;amp; Tools&lt;/strong>: Docker, AWS (EC2, S3, Lambda, SQS), Prometheus, Grafana, Kibana&lt;/li>
&lt;li>&lt;strong>Testing &amp;amp; Monitoring&lt;/strong>: Jest, Jaeger, Tracing, n8n&lt;/li>
&lt;li>&lt;strong>Others&lt;/strong>: HTML, CSS, Bootstrap, React.js, CI/CD, GitHub, Linux&lt;/li>
&lt;li>&lt;strong>Soft Skills&lt;/strong>: Problem solving, Teamwork&lt;/li>
&lt;li>&lt;strong>Languages&lt;/strong>: English&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="-experience">💼 Experience&lt;/h3>
&lt;h4 id="coin98-92023---42025">Coin98 (9/2023 - 4/2025)&lt;/h4>
&lt;p>&lt;strong>Project: AmberBlocks&lt;/strong> - Blockchain CMS platform&lt;/p></description></item><item><title>Go-live load test &amp; deployment checklist</title><link>https://thanhhv.github.io/wiki/go-live-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thanhhv.github.io/wiki/go-live-checklist/</guid><description>&lt;blockquote>
&lt;p>🎯 &lt;strong>Goal:&lt;/strong> Ensure the system is stable, scalable, and production-ready before launching.&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;h2 id="-i-code--functional">🧱 I. CODE &amp;amp; FUNCTIONAL&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Code reviewed and approved by at least one senior developer&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Unit test coverage ≥ 80%&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Edge cases handled properly&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> No N+1 queries (GraphQL/ORM optimized)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> No leftover &lt;code>console.log&lt;/code> or &lt;code>debugger&lt;/code> in code&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> No secrets or tokens hardcoded&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-ii-cicd--deployment">🚦 II. CI/CD &amp;amp; DEPLOYMENT&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> CI pipeline set up (build → test → deploy)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Rollback plan in place (script or quick revert strategy)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Staging/UAT environment available and tested&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>.env&lt;/code> variables configured correctly (not copied from local)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Proper branch/tag naming (e.g. &lt;code>release/v1.0.0&lt;/code>)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-iii-security">🔒 III. SECURITY&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Auth applied on all sensitive routes (JWT, OAuth, API keys)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Role &amp;amp; permission system tested&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> No publicly exposed sensitive endpoints (&lt;code>/admin&lt;/code>, &lt;code>/debug&lt;/code>)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Checked for XSS, SQLi, path traversal vulnerabilities&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Rate limiting/throttling in place for public APIs&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Security headers enabled (&lt;code>helmet&lt;/code>, CORS, etc.)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-iv-performance--scaling">📈 IV. PERFORMANCE &amp;amp; SCALING&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Load tested for target RPS (e.g. ≥ 10k req/s)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Concurrent users simulated (e.g. 1k logins)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> DB indexed properly (&lt;code>EXPLAIN ANALYZE&lt;/code> used)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Redis, CDN, or in-memory caching applied&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> File/media offloaded to external storage (e.g. S3)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> API only returns necessary data (REST/GraphQL select)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-v-monitoring--alerting">🧠 V. MONITORING &amp;amp; ALERTING&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Logging integrated (Winston, Pino, ELK, Datadog, etc.)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Logs include traceId, userId, route context&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Metrics collection: Prometheus / Grafana / OpenTelemetry&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Alert configured for:
&lt;ul>
&lt;li>High error rate (5xx)&lt;/li>
&lt;li>CPU &amp;gt; 80%&lt;/li>
&lt;li>Memory full&lt;/li>
&lt;li>Queue backlog increasing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-vi-infrastructure">⚙️ VI. INFRASTRUCTURE&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Load balancer configured and stable&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Auto-restart and healthcheck ready (PM2, Docker, k8s readiness)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Database backup and restore tested&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Horizontal scaling/pod autoscaling set up if using k8s&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>.env.production&lt;/code> encrypted or managed via Vault&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-vii-other">📋 VII. OTHER&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Changelog written (&lt;code>CHANGELOG.md&lt;/code>)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Release announcement sent to relevant teams&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Post-deploy checklist created (Smoke test UI/API)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> QA checklist completed (login, checkout, error, etc.)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Graceful fallback UI for error handling&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>/status&lt;/code>, &lt;code>/health&lt;/code>, &lt;code>/metrics&lt;/code>, &lt;code>/version&lt;/code> endpoints ready&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-ready-to-go-live">✅ READY TO GO LIVE?&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Goal&lt;/th>
&lt;th>Ready?&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Code clean and stable&lt;/td>
&lt;td>✅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Load test passed&lt;/td>
&lt;td>✅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Monitoring in place&lt;/td>
&lt;td>✅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rollback plan confirmed&lt;/td>
&lt;td>✅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stakeholders notified&lt;/td>
&lt;td>✅&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-post-go-live-actions">🔁 POST GO-LIVE ACTIONS&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Real-time system monitoring active&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> User feedback monitored&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Latency/error rate observed&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 24h go-live report or postmortem (if needed)&lt;/li>
&lt;/ul></description></item><item><title>Non-Tech Books Worth Reading</title><link>https://thanhhv.github.io/wiki/non-tech-books-worth-reading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thanhhv.github.io/wiki/non-tech-books-worth-reading/</guid><description>&lt;p>Reading is not only for fun, but also to develop clear thinking and deeper perspective.&lt;br>
Here&amp;rsquo;s a list of non-technical books that can help backend engineers grow in mindset and soft skills.&lt;/p>
&lt;h2 id="-psychology--thinking">📘 Psychology &amp;amp; Thinking&lt;/h2>
&lt;ul>
&lt;li>&lt;em>Thinking, Fast and Slow&lt;/em> - Daniel Kahneman&lt;/li>
&lt;li>&lt;em>The One Thing&lt;/em> - Gary W. Keller, Jay Papasan&lt;/li>
&lt;/ul>
&lt;h2 id="-philosophy--life">🌍 Philosophy &amp;amp; Life&lt;/h2>
&lt;ul>
&lt;li>&lt;em>Naval Ravikant: Để thịnh vượng và hạnh phúc&lt;/em> - Eric Jorgenson&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&amp;hellip; will be updated more&lt;/p></description></item></channel></rss>