<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>NodeJs on Thanh HV's Blog</title><link>https://thanhhv.github.io/tags/nodejs/</link><description>Recent content in NodeJs on Thanh HV's Blog</description><generator>Hugo -- 0.146.7</generator><language>en-us</language><lastBuildDate>Sat, 24 May 2025 20:00:00 +0700</lastBuildDate><atom:link href="https://thanhhv.github.io/tags/nodejs/index.xml" rel="self" type="application/rss+xml"/><item><title>Bloom filter là gì và trường hợp sử dụng</title><link>https://thanhhv.github.io/posts/bloom-filter/</link><pubDate>Sat, 24 May 2025 20:00:00 +0700</pubDate><guid>https://thanhhv.github.io/posts/bloom-filter/</guid><description>&lt;p>Chào mọi người, hôm nay trong lúc mình ôn tập kiến thức thì nhớ đến Bloom Filter, thế là mình lại phải viết thêm một bài nói về cái này nữa rồi =))&lt;/p>
&lt;p>&lt;strong>Bloom Filter&lt;/strong> là một cấu trúc dữ liệu xác suất được thiết kế để kiểm tra nhanh chóng xem một phần tử có thuộc tập hợp hay không.&lt;/p>
&lt;p>Công dụng của nó là kiểm tra nhanh xem &lt;em>&amp;ldquo;Cái này có chưa nhỉ?&amp;rdquo;&lt;/em>&lt;/p></description></item><item><title>So sánh Node.js và Golang trong Backend</title><link>https://thanhhv.github.io/posts/nodejs-vs-go/</link><pubDate>Sat, 17 May 2025 19:00:00 +0700</pubDate><guid>https://thanhhv.github.io/posts/nodejs-vs-go/</guid><description>&lt;p>Xin chào mọi người,&lt;/p>
&lt;p>Trong quá trình làm việc ở vị trí Backend Engineer, mình đã trải qua nhiều ngôn ngữ lập trình, trong đó có &lt;strong>Node.js&lt;/strong> và &lt;strong>Golang&lt;/strong>. Vậy trường hợp nào nên dùng Node.js, trường hợp nào nên dùng Golang? Bài viết này chia sẻ kinh nghiệm thực chiến cá nhân và quan sát thực tế từ đồng nghiệp xung quanh. Let&amp;rsquo;s start!&lt;/p>
&lt;p>&lt;img alt="Nodejs-vs-Golang" loading="lazy" src="https://thanhhv.github.io/posts/nodejs-vs-go/nodejs-go.png">&lt;/p>
&lt;hr>
&lt;h3 id="1-hiệu-năng-và-đa-luồng">1. Hiệu năng và Đa luồng&lt;/h3>
&lt;p>&lt;strong>Golang&lt;/strong> có hiệu năng tốt hơn nhờ là compiled language và mô hình &lt;strong>goroutine&lt;/strong> rất nhẹ (lightweight thread do Go runtime quản lý), dễ dàng xử lý hàng nghìn concurrent connections mà tốn rất ít tài nguyên.&lt;/p></description></item><item><title>Xác thực người dùng bằng ví crypto</title><link>https://thanhhv.github.io/posts/verify-user-wallet/</link><pubDate>Sun, 11 May 2025 20:40:00 +0700</pubDate><guid>https://thanhhv.github.io/posts/verify-user-wallet/</guid><description>&lt;p>Hôm nay, trong một buổi đầu tuần sau chuyến đi du lịch giữa năm, tôi tranh thủ ôn lại kiến thức để chuẩn bị cho buổi phỏng vấn vị trí Backend Blockchain sắp tới. Nhân tiện, tôi viết lại bài này để ghi nhớ kỹ thuật xác thực người dùng không cần tài khoản và mật khẩu, mà sử dụng đăng nhập bằng ví Web3 (như Metamask, Coin98 Super Wallet, Trust Wallet,&amp;hellip;). Cùng bắt đầu nhé! Quá trình này gồm &lt;strong>3 bước đơn giản&lt;/strong>:&lt;/p></description></item></channel></rss>